# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
stages:
- prepare
- prebuild
- test

variables:
  PIP_CACHE_DIR: "~/Desktop/Gitlab$/.cache/pip"
  
   # Following variables are used in some jobs to install specified software
  DOCKER_MACHINE_VERSION: "0.14.0"
  DUMB_INIT_VERSION: "1.0.2"
  GIT_VERSION: "2.21.0"
  GIT_VERSION_BUILD: "1"
  GIT_LFS_VERSION: "2.7.1"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
before_script:
  - unset GPG_KEY

image: $CI_IMAGE

# Skip all jobs except the ones that begin and end with 'docs'.
# Used for commits including ONLY documentation changes.
# https://docs.gitlab.com/ce/development/writing_documentation.html#testing
.except_docs: &except_docs
  except:
  - /(^docs[\/-].*|.*-docs$)/
  
  
.windows_base:
  variables: &windows_base_variables
    PKG_NAMESPACE: gitlab.com\gitlab-org
    PKG_NAME: gitlab-runner
    GOPATH: "$CI_PROJECT_DIR\\.gopath"
    PKG_BASE_DIR: "$CI_PROJECT_DIR\\.gopath\\src\\$PKG_NAMESPACE"
    PKG_BUILD_DIR: "$CI_PROJECT_DIR\\.gopath\\src\\$PKG_NAMESPACE\\$PKG_NAME"

.docker: &docker
  <<: *except_docs
  services:
   - docker:dind
  variables: &docker_variables
    CI_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.8.7-2
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  tags:
  - docker

.windows1803: &windows1803
  variables: &windows1803_variables
    <<: *windows_base_variables
    WINDOWS_VERSION: nanoserver1803
  tags:
  - windows-1803
  - shell


#
# Prepare stage
#

#.image_builder: &image_builder
 # <<: *docker
  #stage: prepare
  #image: docker:git
  #script:
  #- source ./ci/build_ci_image

#prepare ci image:
 # <<: *image_builder
  #variables:
   # BUILD_IMAGE: $CI_IMAGE
 #   BUILD_DOCKERFILE: ./dockerfiles/ci/Dockerfile
 # only:
  #- /\Adocker-ci-image\/.*/

#prepare alpine-no-root image:
 # <<: *image_builder
  #variables:
   # BUILD_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest
    #BUILD_DOCKERFILE: ./tests/dockerfiles/alpine-no-root/Dockerfile
  #only:
  #- /\Adocker-alpine-no-root-image\/.*/

#
# Prebuild stage
#

#helper images:
 # <<: *docker
  #stage: prebuild
  #script:
  #- make helper-build helper-docker
  #artifacts:
   # paths:
    #- out/helper-images/
    #- dockerfiles/build/binaries/*-windows.exe
    #- .gopath/bin
    #- .gopath/.ok
    #expire_in: 7d

#clone test repo:
 # <<: *except_docs
  #stage: prebuild
  #script:
  #- mkdir tmp
  #- succeed=0
  #- for i in {1..3}; do git clone https://gitlab.com/gitlab-org/ci-cd/tests/gitlab-test.git tmp/gitlab-test && succeed=1 && break; echo "retrying"; done
  #- '[[ "$succeed" -eq 1 ]]'
  #artifacts:
   # paths:
    #- tmp/gitlab-test
    #expire_in: 7d

# Review docs base
#.review-docs: &review-docs
 # image: ruby:2.4-alpine
  #before_script:
   # - unset GPG_KEY
    #- gem install gitlab --no-doc
    
    
    # We need to download the script rather than clone the repo since the
    # review-docs-cleanup job will not be able to run when the branch gets
    # deleted (when merging the MR).
    
    #- apk add --update openssl
    #- wget https://gitlab.com/gitlab-org/gitlab-ce/raw/master/scripts/trigger-build-docs
    #- chmod 755 trigger-build-docs
  #cache: {}
 # dependencies: []
  #variables:
   # GIT_STRATEGY: none
  #when: manual
  #only:
   # - branches
    
# Trigger a docs build in gitlab-docs
# Useful to preview the docs changes live
# https://docs.gitlab.com/ee/development/writing_documentation.html#previewing-the-changes-live
#review-docs-deploy:
 # <<: *review-docs
  #stage: prebuild
  #environment:
   # name: review-docs/$CI_COMMIT_REF_SLUG
   
    # DOCS_REVIEW_APPS_DOMAIN and DOCS_GITLAB_REPO_SUFFIX are secret variables
    # Discussion: https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/14236/diffs#note_40140693
    
    #url: http://$CI_ENVIRONMENT_SLUG.$DOCS_REVIEW_APPS_DOMAIN/$DOCS_GITLAB_REPO_SUFFIX
    
   # on_stop: review-docs-cleanup
  #script:
   # - ./trigger-build-docs deploy



#tests definitions:
 # <<: *except_docs
  #stage: prebuild
  
  # Using Go 1.10, because the `go test -list` is unavailable in <1.9
  # and it's much faster in 1.10. And since there is no real test execution
  # in this step, the version difference doesn't matter
  
  #image: golang:1.10
  #script:
  #- apt update
  #- apt install make
  #- source ci/touch_make_dependencies
  #- make parallel_test_prepare
  #artifacts:
   # paths:
    #- testsdefinitions.txt
    #expire_in: 7d
  #tags:
  #- gitlab-org

#dep check:
 # <<: *except_docs
  #stage: prebuild
  #cache: {}
  #dependencies:
  #script:
  #- make dep_check

#dep status:
 # <<: *except_docs
  #stage: prebuild
  #cache: {}
  #dependencies:
  #script:
  #- make dep_status
  #only:
   # variables:
    #- $CI_DEP_STATUS_ENABLED

#
# Test stage
#

#code_quality:
 # <<: *except_docs
  #stage: test
  #image: docker:git
  #services:
   # - docker:dind
  #variables:
   # DOCKER_DRIVER: overlay2
    #CODECLIMATE_FORMAT: json
  #cache: {}
  #dependencies: []
  #script:
   # - ./scripts/codequality analyze -f json --dev | tee gl-code-quality-report.json
  #artifacts:
   # paths: [gl-code-quality-report.json]
    #expire_in: 7d


#unit test: &unit_tests
 # <<: *docker
  #stage: test
  #parallel: 5
  #variables:
   # <<: *docker_variables
    #GIT_LFS_256_CHECKSUM: 7be85238cbbb957ab25de52b60279d40ba40d3faa72eeb2cb9fa77d6d92381e5
  #before_script:
  
    # This' script content as well as the definition of GIT_LFS_256_CHECKSUM should be moved to
    # "prepare ci image". Git LFS should be installed inside of the CI image. Unfortunately, building
    # this image is currently blocked because of https://gitlab.com/gitlab-org/gitlab-runner/issues/3946.
    # After we will resolve this issue, we should update the CI configuration and move the Git LFS installation
    # to the proper place.
    
    #- ./ci/install_git_lfs
  #script:
   # - source ci/touch_make_dependencies
    #- make parallel_test_execute
#  artifacts:
 #   paths:
  #    - .cover/*
   #   - .testoutput/*
    #when: always
    #expire_in: 7d
    
#unit test with race:
 # <<: *unit_tests
  #allow_failure: true
  #variables:
   # <<: *docker_variables
    #GIT_LFS_256_CHECKSUM: 7be85238cbbb957ab25de52b60279d40ba40d3faa72eeb2cb9fa77d6d92381e5
    #CGO_ENABLED: "1"
    #TESTFLAGS: "-cover -race"

#docs check links:
 # image: "registry.gitlab.com/gitlab-org/gitlab-build-images:gitlab-docs-lint"
 # stage: test
  #cache: {}
  #dependencies: []
  #before_script:
   # - unset GPG_KEY
  #script:
   # - mv docs/ /tmp/gitlab-docs/content/$DOCS_GITLAB_REPO_SUFFIX
    #- cd /tmp/gitlab-docs
    
    # Build HTML from Markdown
    
    #- bundle exec nanoc
    
    # Check the internal links
    
    #- bundle exec nanoc check internal_links

#.windows test:
 # extends: .except_docs
  #stage: test
  #parallel: 3
  #variables:
   # GOROOT: "C:\\Go"
  #before_script:
  #- if (Test-Path $GOPATH) { Remove-Item -Force -Recurse $GOPATH }
  #- New-Item $PKG_BASE_DIR -ItemType directory -Force
  #- New-Item -ItemType SymbolicLink -Path $PKG_BUILD_DIR -Value $CI_PROJECT_DIR
  #- cd $PKG_BUILD_DIR
  #script:
  #- .\ci\test_windows.ps1
  #after_script:
  #- if (Test-Path $PKG_BUILD_DIR) { $(Get-Item $PKG_BUILD_DIR).Delete() }
  #allow_failure: true
  #only:
  #- /.*/@gitlab-org/gitlab-runner


#windows 1803 tests:
 # <<: *windows1803
  #extends: .windows test

#git 1.7.1:
 # <<: *except_docs
  #image: centos:6
  #stage: test
  #variables:
   # GOROOT: /usr/local/go
    #GOPATH: /go
    #CGO_ENABLED: 0
    #OUR_PACKAGES: gitlab.com/gitlab-org/gitlab-runner/executors/shell gitlab.com/gitlab-org/gitlab-runner/shells
  #before_script:
   # - unset GPG_KEY
    #- yum install -y -q git && git version
    #- curl https://storage.googleapis.com/golang/go1.8.7.linux-amd64.tar.gz | tar zx -C $(dirname "$GOROOT")
    #- export PATH=${GOROOT}/bin:$PATH
    #- source ci/touch_make_dependencies
  #script:
   # - make test




cache:
  paths:
    - .cache/pip
    - venv/
    - dist/*

before_script:
  - python -V               # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  #- pip install -r requirements.txt

test:
  script:
  #- pip install -r requirements.txt
  - python manage.py test
  
  - pip install tox flake8  # you can also use tox
  - tox -e py36,flake8

run:
  script:
  - python manage.py bdist_wheel
  # an alternative approach is to install and run:
  - pip install dist/*
  # run the command here
 # -mv build/../dist/*
  artifacts:
    paths:
    - dist/*.whl

pages:
  script:
  - pip install sphinx sphinx-rtd-theme
  - echo "" > webpage.html
  - cd doc ; make html
  - mv build/html/ ../public/
  artifacts:
    paths:
    - public
  only:
  - Tshepang
